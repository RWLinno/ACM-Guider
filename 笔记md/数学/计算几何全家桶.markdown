---
title : 计算几何（二维）
tags : ACM,数学,计算几何
date : 2021-10-23
author : Linno

---

![在这里插入图片描述](https://img-blog.csdnimg.cn/dbd38700f3d64071ae117bc5af22c20b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA57yE5ruF,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center)


### 向量

##### 点乘与叉乘

叉乘一般用于求面积或者判断两点的相对位置：(x1,y1)×(x2,y2)=x1*y2-x2\*y1;

点乘一般用于判断直线是否正交：(x1,y1)·(x2,y2)=x1*x2+y1\*y2;

```C++
inline double Len(Vt a){return sqrt(Dot(a,a));}//模长
inline Vt operator +(Vt a,Vt b){
    return Vt(a.x+b.x,a.y+b.y);
} //向量加减
inline Vt operator -(Vt a,Vt b){
    return Vt(a.x-b.x,a.y-b.y);
}
inline Vt operator *(Vt a,double b){
    return Vt(a.x*b,a.y*b); //数乘
}
inline double Dot(Vt a,Vt b){
    return a.x*b.x+a.y*b.y; //点积
}
inline double Cross(Vt a,Vt b){
    return a.x*b.y-a.y*b.x; //叉积
}
```



### 点与向量

##### 点旋转

$(x,y)绕原点逆时针旋转\alpha(xcos\alpha-ysin\alpha,xsin\alpha+ycos\alpha)$

```C++
inline Point turn_P(Point a,double theta){
    double x=a.x*cos(theta)+a.y*sin(theta);
    double y=-a.x*sin(theta)+a.y*cos(theta);
    return Point(x,y);
}//点a或向量(两点)关于原点顺时针旋转theta(弧度)

inline Point turn_PP(Point a,Point b,double theta){
    double x=(a.x-b.x)*cos(theta)+(a.y-b.y)*(theta)+b.x;
    double y=-(a.x-b.x)*sin(theta)+(a.y-b.y)*cos(theta)+b.y;
    return Point(x,y);
}
```



### 点与线段

```C++
inline int dcmp(double a){
	return a<-eps?-1:(a>eps?1:0); //处理精度
}
inline bool in_line(Point P,Point A,Point B){
    return !dcmp(Cross(P-A,B-A))&&dcmp(Dot(P-A,P-B))<=0;
} //判断点P是否在AB上，判是否处于直线上可删去后面的条件

inline double dis_PL(Point P,Point A,Point B){
    if(a==b) return Len(P-A);//AB点重合
    Vt x=P-A,y=P-B,Z=B-A;
    if(dcmp(Dot(x,z))<0) return Len(x); //P离A近
    if(dcmp(Dot(y,z))>0) return Len(y); //P离B近
    return Abs(Cross(x,z)/Len(z)); //面积处于底边长
}//P到线段AB的距离
```



### 点与直线



```C++
inline int in_Line(Point P,Point A,Point B){
    return !dcmp(Cross(P-A,B-A)); //PA,AB共线
} //判断P是否在AB上

inline Point FootPoint(Point P,Point A,Point B){
    Vt x=P-A,y=P-B,z=B-A;
    double len1=Dot(x,z)/Len(z),len2=Dot(y,z)/Len(z);//分别计算AP,BP在AB,BA上的投影
    return A+z*(len1/(len1+len2));//点A假设向量AF
} //获得P到AB的垂足

inline Point Symmetry_PL(Point P,Point A,Point B){
    return P+(FootPoint(P,A,B)-P)*2;
} //获得P关于直线AB的对称点
```



### 线与线

##### 两直线AB,CD的交点



```C++
inline Point cross_p(Point a,Point b,Point c,Point d){
    Vt x=b-a,y=d-c,z=a-c;
    return a+x*(Corss(y,z)/Cross(x,y)); //点A加向量AF
}//两直线AB,CD的交点

```



##### 判断两线相交

```C++
inline bool is_cross(Point a,Point b,Point c,Point d){
    return in_Line(cross_p(a,b,c,d),c,d); //直线AB与CD的焦点在线段CD上
} //判断直线AB与CD是否相交

inline int is_cross_ll(Point a,Point b,Point c,Point d){
    double c1=Cross(b-a,c-a),c2=Cross(b-a,d-a);
    double d1=Cross(d-c,a-c),d2=Cross(d-c,b-c);
    return dcmp(c1)*dcmp(c2)<0&&dcmp(d1)*dcmp(d2)<0; //分别在两侧
}//判断两线段AB,CD是否相交

```

跨立实验：我们可以利用叉积，取A为原点，B夹在AC和AD中间，那么AC×AB与AB×AD同号，这时候AB可能处于CD之外，我们可以取C为原点再次进行实验。当两组通过时AB与CD是相交的。

```C++
double cross(P a,P b,P c){ //ab×ac
    return (b.x-a.x)*(c.y-a.y)-(b.y-a.y)*(c.x-a.x);
}

bool isintersected(P a,P b,P c,P d){//判断ab和cd是否相交
    double u,v,w,z;
    u=cross(a,b,c);
    v=cross(a,b,d);
    w=cross(c,d,b);
    z=corss(c,d,a);
    return (u*v<=1e-7&&w*z<=1e-7) //1相交0不相交
}
```





### 点与多边形

##### 判断点A是否在任意多边形Poly内(射线法)

```C++
inline int PIP(Point *P,int n,Point a){
    int cnt=0;double tmp;
    for(int i=1;i<=n;i++){
        int j=i<n?i+1:1;
        if(in_line(a,P[i],P[j])) return 2;//点在多边形上
        if(a.y>=min(P[i].y,P[j].y)&&a.y<max(P[i].y,P[j].y)) //纵坐标在该线段两端点之间
            tmp=P[i].x+(a.y-P[i].y)/(P[j].y-P[i].y)*(P[j].x-P[i].x),cnt+=dcmp(tmp-a.x)>0; //交点在A右方
    }
    return cnt&1; //穿过奇数次则在多边形中
}
```



##### 判断点A是否在凸多边形Poly以内（二分法）

```C++
inline int judge(Point a,Point L,Point R){ //判断AL是否在AR右边
    return dcmp(Cross(L-a,R-a))>0;//必须严格以内
}
inline int PIP_(Point *P,int n,Point a){ //二分法判断A是否在凸多边形Poly内
    //点按逆时针给出
    if(judge(P[1],a,P[2])||judge(P[1],P[n],a)) return 0; //在P[1_2]或P[1_n]外
    if(in_line(a,P[1],P[2])||in_line(a,P[1],P[n])) return 2; //在P[1_2]或P[1_n]上
    int l=2,r=n-1;
    while(l<r){ //二分找到一个位置pos使得P[1]_A在P[1_pos],P[1_(pos+1)]之间
        int mid=l+r+1>>1;
        if(judge(P[1],P[mid],a)) l=mid;
        else r=mid-1;
    }
    if(judge(P[l],a,P[l+1])) return 0;//在P[pos_(pos+1)]外
    if(in_line(a,P[l],P[l+1])) return 2; //在P[pos_(pos+1)]上
    return 1;
}
```



### 多边形与多边形

##### 判断是否相离

属于不同多边形的任意两边都不相交，且一个多边形上的任意点都不被另一个多边形所包含。

```C++
inline int judge_PP(Point *A,Re n,Point *B,Re m){//【判断多边形A与多边形B是否相离】 
    for(Re i1=1;i1<=n;++i1){
        Re j1=i1<n?i1+1:1;
        for(Re i2=1;i2<=m;++i2){
            Re j2=i2<m?i2+1:1;
            if(pan_cross_LL(A[i1],A[j1],B[i2],B[j2]))return 0;//两线段相交
            if(PIP(B,m,A[i1])||PIP(A,n,B[i2]))return 0;//点包含在内
        }
    }
    return 1;
}
```



### 图形面积

##### 任意多边形面积

将其划分为许多个三角形并用叉积求面积。

```C++
inline double PolyArea(Point *P,int n){
    double S=0;
    for(int i=1;i<=n;i++) S+=Cross(P[i],P[i<n?i+1:1]);
    return S/2;
}
```



##### 两圆交面积

S=两边扇形面积之和-四边形面积。

可以利用余弦定理求两扇形的夹角
$$
cos\theta_1=\frac{R_1^2+d^2-R_2^2}{2dR_1}\\
cos\theta_2=\frac{R_2^2+d^2-R_1^2}{2dR_2}\\
扇形面积计算（弧度制）:S=\frac{1}{2}\theta R^2
$$



```c++
double AREA(point a, double r1, point b, double r2)
{
	double d = sqrt((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y));
	if (d >= r1+r2) return 0;
	if (r1>r2)
	{
		double tmp = r1;
		r1 = r2;
		r2 = tmp;
	}
	if(r2 - r1 >= d)
		return pi*r1*r1;
	double ang1=acos((r1*r1+d*d-r2*r2)/(2*r1*d));
	double ang2=acos((r2*r2+d*d-r1*r1)/(2*r2*d));
	return ang1*r1*r1 + ang2*r2*r2 - r1*d*sin(ang1);
}
```



##### 圆与多边形的面积交

将多边形剖分成若干三角形，考虑圆与每个三角形的面积交的并即为圆与该多边形的面积交。

```C++
double Direct_Triangle_Circle_Area(point a,point b,point o,double r)
{
    double sign=1.0;
    a=a-o;
    b=b-o;
    o=point(0.0,0.0);
    if(fabs(xmult(a,b,o))<eps) return 0.0;
    if(distp(a,o)>distp(b,o))
    {
        swap(a,b);
        sign=-1.0;
    }
    if(distp(a,o)<r*r+eps)
    {
        if(distp(b,o)<r*r+eps) return xmult(a,b,o)/2.0*sign;
        point p1,p2;
        intersection_line_circle(o,r,a,b,p1,p2);
        if(distancex(p1,b)>distancex(p2,b)) swap(p1,p2);
        double ret1=fabs(xmult(a,p1,o));
        double ret2=acos( p1*b/p1.sqrx()/b.sqrx() )*r*r;
        double ret=(ret1+ret2)/2.0;
        if(xmult(a,b,o)<eps && sign>0.0 || xmult(a,b,o)>eps && sign<0.0) ret=-ret;
        return ret;
    }
    point ins=ptoseg(o,a,b);
    if(distp(o,ins)>r*r-eps)
    {
        double ret=acos( a*b/a.sqrx()/b.sqrx() )*r*r/2.0;
        if(xmult(a,b,o)<eps && sign>0.0 || xmult(a,b,o)>eps && sign<0.0) ret=-ret;
        return ret;
    }
    point p1,p2;
    intersection_line_circle(o,r,a,b,p1,p2);
    double cm=r/(distancex(o,a)-r);
    point m=point( (o.x+cm*a.x)/(1+cm) , (o.y+cm*a.y)/(1+cm) );
    double cn=r/(distancex(o,b)-r);
    point n=point( (o.x+cn*b.x)/(1+cn) , (o.y+cn*b.y)/(1+cn) );
    double ret1 = acos( m*n/m.sqrx()/n.sqrx() )*r*r;
    double ret2 = acos( p1*p2/p1.sqrx()/p2.sqrx() )*r*r-fabs(xmult(p1,p2,o));
    double ret=(ret1-ret2)/2.0;
    if(xmult(a,b,o)<eps && sign>0.0 || xmult(a,b,o)>eps && sign<0.0) ret=-ret;
    return ret;
}
```





##### 面积并

自适应辛普森法(会开博文另外讲)

##### [Acwing 3069. 圆的面积并](https://www.acwing.com/problem/content/3072/)

```C++
#include<bits/stdc++.h>
#define x first
#define y second
using namespace std;
const int N=1007;
const double eps=1e-8;
typedef pair<double,double>PDD;

struct Circle{
	PDD o;
	double r;
}c[N];

int n;
PDD q[N];

int judge(double a,double b){
	if(fabs(a-b)<eps) return 0;//相等
	if(a<b) return -1;
	return 1; 
}

double f(double x){
	int cnt=0;
	for(int i=0;i<n;i++){
		double X=fabs(c[i].o.x-x),R=c[i].r;
		if(judge(X,R)<0){
			double Y=sqrt(R*R-X*X);
			q[cnt++]={c[i].o.y-Y,c[i].o.y+Y}; 
		}
	}
	if(!cnt) return 0;
	sort(q,q+cnt);
	double st=q[0].x,ed=q[0].y,res=0; //区间合并
	for(int i=1;i<cnt;i++){
		if(q[i].x<=ed) ed=max(ed,q[i].y);
		else{
			res+=ed-st;
			st=q[i].x;
			ed=q[i].y;
		}
	}
	return res+ed-st;
}

double simpson(double l,double r){ //辛普森积分
	double mid=(l+r)/2;
	return (r-l)*(f(l)+4*f(mid)+f(r))/6; 
}

double asr(double l,double r,double s){ //递归自适应 
	double mid=(l+r)/2;
	double lf=simpson(l,mid),rg=simpson(mid,r);
	if(fabs(s-lf-rg)<eps) return lf+rg;
	return asr(l,mid,lf)+asr(mid,r,rg);
}

signed main(){
	cin>>n;
	for(int i=0;i<n;i++) cin>>c[i].o.x>>c[i].o.y>>c[i].r;
	double l=-2000,r=2000;
	printf("%.3lf\n",asr(l,r,simpson(l,r)));
	return 0;
}
```



##### 多边形面积交

先求交集表示的多边形，随后多边形求面积。

```C++
void ClockwiseSortPoints(std::vector<Point> &vPoints)
{ //点集排序
    //计算重心
    cv::Point center;
    double x = 0,y = 0;
    for (int i = 0;i < vPoints.size();i++)
    {
        x += vPoints[i].x;
        y += vPoints[i].y;
    }
    center.x = (int)x/vPoints.size();
    center.y = (int)y/vPoints.size();

    //冒泡排序
    for(int i = 0;i < vPoints.size() - 1;i++)
    {
        for (int j = 0;j < vPoints.size() - i - 1;j++)
        {
            if (PointCmp(vPoints[j],vPoints[j+1],center))
            {
                cv::Point tmp = vPoints[j];
                vPoints[j] = vPoints[j + 1];
                vPoints[j + 1] = tmp;
            }
        }
    }
}

bool PolygonClip(const vector<Point> &poly1,const vector<Point> &poly2, std::vector<Point> &interPoly)
{
    if (poly1.size() < 3 || poly2.size() < 3)
    {
        return false;
    }

    long x,y;
    //计算多边形交点
    for (int i = 0;i < poly1.size();i++)
    {
        int poly1_next_idx = (i + 1) % poly1.size();
        for (int j = 0;j < poly2.size();j++)
        {
            int poly2_next_idx = (j + 1) % poly2.size();
            if (GetCrossPoint(poly1[i],poly1[poly1_next_idx],
                poly2[j],poly2[poly2_next_idx],x,y))
            {
                interPoly.push_back(Point(x,y));
            }
        }
    }
    //计算多边形内部点
    for(int i = 0;i < poly1.size();i++)
    {
        if (IsPointInpolygon(poly2,poly1[i]))
        {
            interPoly.push_back(poly1[i]);
        }
    }
    for (int i = 0;i < poly2.size();i++)
    {
        if (IsPointInpolygon(poly1,poly2[i]))
        {
            interPoly.push_back(poly2[i]);
        }
    }

    if(interPoly.size() <= 0)
        return false;

    //点集排序
    ClockwiseSortPoints(interPoly);
    return true;
}
```





### 凸包

##### Graham扫描法求凸包

```C++
inline bool cmp1(Vt a,Vt b){return a.x==b.x?a.y<b.y:a.x<b.x;}//按坐标排序
inline int ConvexHull(Point *P,int n,Point *cp){
    sort(P+1,P+1+n,cmp1);
    int t=0;
    for(int i=1;i<=n;i++){ //下凸包
        while(t>1&&dcmp(Cross(cp[t]-cp[t-1],P[i]-cp[t-1]))<=0) --t;
        cp[++t]=P[i];
    }
    int st=t;
    for(int i=n-1;i>=1;i--){
        while(t>st&&dcmp(cross(cp[t]-cp[t-1],P[i]-cp[t-1]))<=0) t--;
    }
    return --t; 
}
```



##### 旋转卡壳

通过枚举凸包上某条边的同时维护其他的点。

可求凸包直径、求最小矩形覆盖和凸包性质相关的问题。

```C++
int ans=Len(cp[2]-cp[1]);
for(int i=1,j=3;i<=cnt;i++){
    while(dcmp(Cross(cp[i-1]-cp[i],cp[j]-cp[i])-Cross(cp[i+1]-cp[i],cp[j+1],cp[i]))<=0) j=j<cnt?j+1:1;
    ans=max(ans,max(Len(cp[j]-cp[i]),Len(cp[j],cp[i+1])));
}
```



##### 半平面交

半平面交是指多个半平面的交集。因为半平面是点集，所以点集的交集仍然是点集。在平面直角坐标系围成一个区域。

```C++
struct Line{
    Point a,b;LD k;
    Line(Point A=Point(0,0),Point B=Point(0,0)){a=A,b=B,k=atan2(b.y-a.y,b.x-a.x);}
    inline bool operator<(const Line &O)const{
        return dcmp(k-O.k)?dcmp(k-O.k)<0:judge(O.a,O.b,a);
    }//如果角度相等则取左边的
}L[N],Q[N];

inline Point Cross(Line L1,Line L2){
    return cross_LL(L1.a,L1.b,L2.a,L2.b);
}//获取直线L1,L2的交点 

inline int judge(Line L,Point a){
    return dcmp(cross(a-L.a,L.b-L.a))>0;
}//判断点a是否在直线L的右边

inline int halfcut(Line *L,int n,Point *P){//【半平面交】 
    sort(L+1,L+n+1);
   	int m=n;n=0;
    for(int i=1;i<=m;++i)
        if(i==1||dcmp(L[i].k-L[i-1].k))L[++n]=L[i];
    int h=1,t=0;
    for(int i=1;i<=n;++i){
        while(h<t&&judge(L[i],cross(Q[t],Q[t-1])))--t;//当队尾两个直线交点不是在直线L[i]上或者左边时就出队
        while(h<t&&judge(L[i],cross(Q[h],Q[h+1])))++h;//当队头两个直线交点不是在直线L[i]上或者左边时就出队
        Q[++t]=L[i];
    }
    while(h<t&&judge(Q[h],cross(Q[t],Q[t-1])))--t;
    while(h<t&&judge(Q[t],cross(Q[h],Q[h+1])))++h;
    n=0;
    for(Re i=h;i<=t;++i)P[++n]=cross(Q[i],Q[i<t?i+1:h]);
    return n;
}
```



##### 闵可夫斯基和

```C++
Vt V1[N],V2[N];
inline int Mincowski(Point *P1,int n,Point *P2,int m,Vt *V){
	for(int i=1;i<=n;i++) V1[i]=P1[i<n?i+1:1]-P1[i];
    for(int i=1;i<=m;i++) V2[i]=P2[i<m?i+1:1]-P2[i];
    int t=0,i=1,j=1,V[++t]=P1[1]+P2[1];
    while(i<=n&&j<=m) ++t,V[t]=V[t-1]+(dcmp(Cross(V1[i],V2[j]))>0?V1[i++]:V2[j++]);
    while(i<=n) ++t,V[t]=V[t-1]+V1[i++];
    while(j<=m) ++t,V[t]=V[t-1]+V2[j++];
    return t;
}//求两个凸包{P1},{P2}的向量集合{V}={P1+P2}构成的凸包
```



##### 动态凸包

```C++
struct ConvexHull{
    int op;set<Point>s;
    inline int PIP(Point P){
        IT it=s.lower_bound(Point(P.x,-inf)); //IT为迭代器，找到第一个横坐标大于等于P的点
        if(it==s.end()) return 0;
        if(it->x==P.x) return (P.y-it->y)*op<=0;//比较纵坐标
        if(it==s.begin()) return 0;
        IT j=it,k=it;--j;
        return Cross(P-*j,*k-*j)*op>=0;
    }
    inline int judge(IT it){
        IT j=it,k=it;
        if(j==s.begin()) return 0;
        j--;
        if(++k==s.end()) return 0;
        return Cross(*it-*j,*k-*j)*op>=0;
    }
    inline void insert(Point P){
        if(PIP(P)) return;//如果点P已经在凸壳上或凸包里就不插入了
        IT tmp=s.lower_bound(Point(P.x,-inf));
        if(tmp!=s.end()&&tmp->x==P.x) s.erase(tmp);//特判横坐标相等的点
        s.insert(P);
        IT it=s.find(P),p=it;
        if(p!=s.begin()){
            --p;while(judge(p)) tmp=p--,s.erase(tmp);
        }
        if((p==++it)!=s.end()) while(judge(p)) IT tmp=p++,s.erase(tmp);
    }
}up,down;
int x,y,T,op;
signed main(){
    cin>>T;
    up.op=1,down.op=-1;
    while(T--){
        cin>>op;P.In();
        if(op<2) up.insert(P),down.insert(P); //插入点P
        else puts((up.PIP(p)&&down.PIP(p))?"YES":"NO");
    }
}
```



### 圆

##### 三点确定一圆

```C++
#define S(a) ((a)*(a))
struct Circle{Point O;LD r;Circle(Point P,LD R=0){O=P,r=R;}};
inline Circle getCircle(Point A,Point B,Point C){
    double x1=A.x,y1=A.y,x2=B.x,y2=B.y,x3=C.x,y3=C.y;
    double D=((S(x2)+S(y2)-S(x3)-S(y3))*(y1-y2)-(S(x1)+S(y1)-S(x2)-S(y2))*(y2-y3))/((x1-x2)*(y2-y3)-(x2-x3)*(y1-y2));
    double E=(S(x1)+S(y1)-S(x2)-S(y2)+D*(x1-x2))/(y2-y1);
    double F=-(S(x1)+S(y1)+D*x1+E*y1);
    return Circle(Point(-D/2.0,-E/2.0),sqrt((S(D)+S(E)-4.0*F)/4.0));
}//【三点确定一圆】暴力解方程
```



##### 最小覆盖圆

**【定理】** 如果点 pp 不在集合 {S}{S} 的最小覆盖圆内，则 pp 一定在 {S}∪p{S}∪p 的最小覆盖圆上。

```C++
inline int PIC(Circle C,Point a){
    return dcmp(Len(a-C.O)-C.r)<=0; //判断点在圆内
}
inline void Random(Point *P,int n){for(int i=1;i<=n;i++) swap(P[i],P[rand()%n+1]);} //随机一个排列
inline Circle Min_Circle(Point *P,int n){ //求点集P的最小覆盖圆
    Random(P,n);Circle C=Circle(P[1],0);
    for(int i=2;i<=n;i++) if(!PIC(C,P[i])){
        C=Circle(P[i],0);
        for(int j=1;j<i;j++) if(!PIC(C,P[j])){
            C.O=(P[i]+P[j])*0.5,C.r=Len(P[j]-C.O);
            for(int k=1;k<j;k++) if(!PIC(C,P[k])) C=getcircle(P[i],P[j],P[k]);
        }
    }
    return C;
}
```



##### 三角剖分

```C++
inline double calc(Point A,Point B,Point O,double R){
    if(A==O||B==O) return 0;
    int op=dcmp(Cross(A-O,B-O))>0?1:-1;double ans=0;
    Vt x=A-O,y=B-O;
    int flag1=dcmp(Len(x)-R)>0,flag2=dcmp(Len(y)-R)>0;
    if(!flag1&&!flag2) ans=abs(Cross(A-O,B-O))/2.0;//两点都在里面
    else if(flag1&&flag2){
        if(dcmp(dis_PL(O,A,B)-R)>=0) ans=R*R*Angle(x,y)/2.0; //完全包含了圆弧
        else{ //分三段处理圆弧
            if(dcmp(Cross(A-O,B-O))>0) swap(A,B);//把A换到左边
            Point F=FootPoint(O,A,B);
            double lenx=Len(F-O),len=sqrt(R*R-lenx*lenx);
            Vector z=turn_P(F-O,Pi/2.0)*(len/lenx);
            Point B_=F+z,A_=F-z;
            ans=R*R*(Angle(A-O,A_-O)+Angle(B-O,B_-O))/2.0+Cross(B_-O,A_-O)/2.0;
        }
    }else{ //一个点在里面，一个点在外面
        if(flag1) swap(A,B); //A为里面点，B为外面点
        Point F=FootPoint(O,A,B);
        double lenx=Len(F-O),len=sqrt(R*R-lenx*lenx);
        Vector z=turn_P(F-O,Pi/2.0)*(len/lenx);
        Point C=dcmp(Cross(A-O,B-O))>0?F-z:F+z;
        ans=abs(Cross(A-O,C-O))/2.0+R*R*Angle(C-O,B-O)/2.0;
    }
    return ans*op;
}
```



##### 求两圆交点

```C++
int getCircleIntersection(Circle C1, Circle C2) {
	LD &r1 = C1.r, &r2 = C2.r;
	LD &x1 = C1.c.x, &x2 = C2.c.x, &y1 = C1.c.y, &y2 = C2.c.y;
	LD d = Length(C1.c - C2.c);
	if(dcmp(fabs(r1-r2) - d) > 0) return -1;
	if(dcmp(r1 + r2 - d) < 0) return 0;
	LD d2 = Dot(C1.c - C2.c, C1.c - C2.c);
	LD a = r1*(x1-x2)*2, b = r1*(y1-y2)*2, c = r2*r2-r1*r1-d*d;
	LD p = a*a+b*b, q = -a*c*2, r = c*c-b*b;

	LD cosa, sina, cosb, sinb;
	//One Intersection
	if(dcmp(d - (r1 + r2)) == 0 || dcmp(d - fabs(r1 - r2)) == 0) {
		cosa = -q / p / 2;
		sina = sqrt(1 - sqr(cosa));
		Point p(x1 + C1.r * cosa, y1 + C1.r * sina);
		if(!OnCircle(p, C2)) p.y = y1 - C1.r * sina;
		inter.push_back(p);
		return 1;
	}
	//Two Intersections
	LD delta = sqrt(q * q - p * r * 4);
	cosa = (delta - q) / p / 2;
	cosb = (-delta - q) / p / 2;
	sina = sqrt(1 - sqr(cosa));
	sinb = sqrt(1 - sqr(cosb));
	Point p1(x1 + C1.r * cosa, y1 + C1.r * sina);
	Point p2(x1 + C1.r * cosb, y1 + C1.r * sinb);
	if(!OnCircle(p1, C2)) p1.y = y1 - C1.r * sina;
	if(!OnCircle(p2, C2)) p2.y = y1 - C1.r * sinb;
	if(p1 == p2)  p1.y = y1 - C1.r * sina;
	inter.push_back(p1);
	inter.push_back(p2);
	return 2;
}
```





##### 直线与圆的交点

```C++
double myRound(double a){//因为小数有误差，所以判断相切时要精确到固定位数 
	return floor(a * 100 + 0.5) / 100; /*保留小数点后2位*/
}
bool interPointOfLineAndCircle(line l,point O,double r,vector<point> &ans){ //直线到圆的交点
	ans.clear();
	point C,D,E;
	double d=disOfPointToLine(O,l); //点到直线的距离
	E = shadowPointOfPointToLine(O,l); //点在直线上的投影
	vect2 AB = l.end-l.start;
	vect2 e=AB/dis(l.start,l.end);//两点距离
	double base2 =myRound(r*r-d*d);//取约数，不然本来是0的会得不到0 
	//相切base^2 =0 两个点相等,相离 base^2<0 
	if(base2<0)return false;
	double base = sqrt(base2);	
	C = E - e*base;
	D = E + e*base;
	ans.push_back(C);
	if(!(D.x==C.x&&D.y==C.y))//避免点重复 
		ans.push_back(D);
	if(ans.size()>0)return true;
	else return false;		
}
```



##### 线段到圆的交点

```C++
bool interPointOfLineAndCircle(line l,point O,double r,vector<point> &ans){ //线段到直线的交点
	ans.clear();
	point C,D,E;
	double d= disOfPointToLine(O,l);	
	E = shadowPointOfPointToLine(O,l);		
	vect2 AB = l.end-l.start;
	vect2 e=AB/dis(l.start,l.end);
	double base2 =myRound(r*r-d*d); 
	if(base2<0)return false;
	double base = sqrt(base2);	
	C = E - e*base;
	D = E + e*base;
	if(pointIsOnLine(C,l))ans.push_back(C);
	if(pointIsOnLine(D,l)&&!(D.x==C.x&&D.y==C.y)) 
		ans.push_back(D);
	if(ans.size()>0)return true;
	else return false;		
}
```



# 参考资料

https://www.cnblogs.com/Xing-Ling/p/12102489.html

https://dev.gameres.com/Program/Abstract/Geometry.htm

https://blog.csdn.net/Meloor/article/details/90181120

https://blog.csdn.net/yuzhiwei1995/article/details/50974638

https://www.cnblogs.com/dwdxdy/p/3230156.html

https://blog.csdn.net/qq_45735851/article/details/115309408

https://www.bilibili.com/video/BV1mD4y1U7rH	
